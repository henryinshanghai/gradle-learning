/*
    创建 task - 手段：在 build.gradle文件中使用 task关键字
    执行task的手段： 同目录下执行 gradle <task_name>
    原理： 自定义的 helloWorld task实例是一个 DefaultTask类型(默认的Task类型)的对象
    task的作用： 打印 hello world
 */
task helloWorld {
    println "Hello World!"
}

/*
    创建 task - 手段： 在 build.gradle文件中使用 task关键字
    作用： 拷贝 A文件夹中的内容 到 B文件夹中；
    特征： 这里所指定的文件夹路径都是相对于 当前 project而言的
 */
task copyFile(type: Copy) {
    from 'xml'
    into 'destination'
}
// 这个就是项目的构建文件了

/*
现在我们都在谈领域驱动设计，Gradle本身的领域对象主要有Project和Task。

Project为Task提供了执行上下文，所有的Plugin:
- 要么向Project中 添加用于配置的Property，
- 要么向Project中 添加不同的Task。

一个Task表示一个逻辑上较为独立的执行过程，比如:
- 编译Java源代码，拷贝文件，打包Jar文件，甚至可以是执行一个系统命令或者调用Ant。

另外，一个Task可以 读取和设置Project的Property 以完成特定的操作。

 */